{"version":3,"sources":["visualizations/D3Dots.js","visualizations/D3Axes.js","visualizations/Dots.jsx","visualizations/Visualization.jsx","App.js","serviceWorker.js","index.js"],"names":["D3Dots","drawDots","ctx","nodes","forEach","node","beginPath","arc","x","y","Math","PI","fillStyle","fill","drawHorizontalLinks","children","child","childNode","cluster","strokeStyle","moveTo","midX","bezierCurveTo","stroke","drawVerticalLinks","midY","D3Axes","drawAxes","xAxisRef","yAxisRef","xScale","xAxis","d3","tickFormat","d","ticks","every","simulation","STATES","GRAPH","BROWNIAN","LINKS","CIRCLE","RADIAL","SINGAPORE","stateKeys","Object","keys","Dots","data","height","width","useState","displayState","setDisplayState","ref","useRef","useEffect","dataNodes","map","dist","random","min","locAngle","fillColor","status","cos","sin","dateConfirmed","Date","radialGraph","stopSimulation","stop","simulateGather","replusion","strength","yForce","xForce","force","alphaMin","velocityDecay","on","forceTick","dailyGraph","i","dayNo","firstDay","lastDay","weeks","Array","ceil","getTime","index","floor","week","weekNo","weekAngle","radialScale","length","current","selectAll","remove","context","getContext","clearRect","_","ellipse","linkGraph","yScale","treeY","simulateBrownian","vx","vy","d3ForceBounce","radius","d3ForceSurface","surfaces","from","to","singaporeBrownian","sgY","sgX","console","log","currState","style","position","transform","onClick","e","preventDefault","newDisplayState","values","indexOf","clickHandler","Visualization","window","innerHeight","innerWidth","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"il2fA4DeA,EA5DA,CACbC,SADa,SACJC,EAAKC,GACZA,EAAMC,SAAQ,SAACC,GACbH,EAAII,YACJJ,EAAIK,IAAIF,EAAKG,EAAGH,EAAKI,EAAG,EAAG,EAAG,EAAIC,KAAKC,IAAI,GAC3CT,EAAIU,UAAYP,EAAKQ,KACrBX,EAAIW,WAIRC,oBAVa,SAUOZ,EAAKC,GACvBA,EAAMC,SAAQ,SAACC,GACTA,EAAKU,UACPV,EAAKU,SAASX,SAAQ,SAACY,GACrB,IAAMC,EAAYd,EAAMa,EAAQ,GAChCd,EAAII,YACAD,EAAKa,UACc,MAAjBb,EAAKa,QAAiBhB,EAAIiB,YAAc,QAClB,MAAjBd,EAAKa,QAAiBhB,EAAIiB,YAAc,MAC5CjB,EAAIiB,YAAc,QAEzBjB,EAAIkB,OAAOf,EAAKG,EAAGH,EAAKI,GACxB,IAAMY,GAAQJ,EAAUT,EAAIH,EAAKG,GAAK,EACtCN,EAAIoB,cACFD,EACAhB,EAAKI,EACLY,EACAJ,EAAUR,EACVQ,EAAUT,EACVS,EAAUR,GAEZP,EAAIqB,gBAMZC,kBArCa,SAqCKtB,EAAKC,GACrBA,EAAMC,SAAQ,SAACC,GACTA,EAAKU,UACPV,EAAKU,SAASX,SAAQ,SAACY,GACrB,IAAMC,EAAYd,EAAMa,EAAQ,GAChCd,EAAII,YACJJ,EAAIkB,OAAOf,EAAKG,EAAGH,EAAKI,GACxB,IAAMgB,GAAQR,EAAUR,EAAIJ,EAAKI,GAAK,EACtCP,EAAIoB,cACFjB,EAAKG,EACLiB,EACAR,EAAUT,EACViB,EACAR,EAAUT,EACVS,EAAUR,GAEZP,EAAIqB,iBC1CCG,EAVA,CACbC,SADa,SACJC,EAAUC,EAAUC,GAC3B,IAAMC,EAAQC,IAAcF,GAAQG,YAAW,SAACC,GAAD,OAAOA,KACtDH,EAAMI,MAAMH,IAAWI,MAAM,IAC7BL,EAAME,WAAWD,IAAc,OAE/BD,EAAMH,K,gBCCNS,G,MAAa,MAEXC,EAAS,CACbC,MAAO,QACPC,SAAU,WACVC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,UAAW,aAIPC,EAAYC,OAAOC,KAAKT,GAyUfU,EArUF,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAAY,EACAC,mBAASd,EAAOM,WADhB,mBACjCS,EADiC,KACnBC,EADmB,KAGlCC,EAAMC,iBAAO,MACb5B,EAAW4B,iBAAO,MAClB3B,EAAW2B,iBAAO,MAExBC,qBAAU,WACR,IAAMC,EAAYT,EAAKU,KAAI,SAACzB,GAC1B,IAAM0B,EAAQlD,KAAKmD,SAAWnD,KAAKoD,IAAIZ,EAAQC,GAAU,EACnDY,EAAWrD,KAAKmD,SAAWnD,KAAKC,GAAK,EACvCqD,EAAY,MAahB,MAXiB,eAAb9B,EAAE+B,OACJD,EAAY,QACU,aAAb9B,EAAE+B,SACXD,EAAY,SAGd9B,EAAE1B,EAAIE,KAAKwD,IAAIH,GAAYH,EAAOT,EAAQ,EAC1CjB,EAAEzB,EAAIC,KAAKyD,IAAIJ,GAAYH,EAAOV,EAAS,EAC3ChB,EAAErB,KAAOmD,EACT9B,EAAEkC,cAAgB,IAAIC,KAAKnC,EAAEkC,eAEtBlC,KAGToC,EAAYZ,KACX,CAACT,EAAMC,EAAQC,IAElB,IA0BMoB,EAAiB,WACjBlC,GAAYA,EAAWmC,QAGvBC,EAAiB,SAACf,GACtBa,IAEAlC,EAAaL,IAAmB0B,GAChC,IAAMgB,EAAY1C,MAAmB2C,UAAU,GAEzCC,EAAS5C,MAEZvB,EAAEyC,EAAS,GACXyB,SAAS,IACNE,EAAS7C,MAEZxB,EAAE2C,EAAQ,GACVwB,SAAS,IAEZtC,EAAWyC,MAAM,IAAKF,GAAQE,MAAM,IAAKD,GACzCxC,EAAWyC,MAAM,YAAaJ,GAE9BrC,EAAW0C,SAAS,IAAKC,cAAc,IACvC3C,EAAW4C,GAAG,QAAQ,kBAAMC,EAAUxB,EAAWpB,EAAOI,YAGpDyC,EAAa,SAACzB,GAClBa,IAEA,IAAMzC,EAASE,IACbA,IAAU0B,EAAUC,KAAI,SAACzB,GAAD,OAAOA,EAAEkC,kBACjC,CAzFU,GAyFAjB,EAzFA,KA4FZd,EAAaL,IAAmB0B,GAChC,IAAMkB,EAAS5C,MAEZvB,GAAE,SAACJ,EAAM+E,GAAP,OAAalC,EA/FN,GA+FyB,EAAI7C,EAAKgF,SACxCR,EAAS7C,MAAYxB,GAAE,SAACH,EAAM+E,GAAP,OAAatD,EAAOzB,EAAK+D,kBAEtD/B,EAAWyC,MAAM,IAAKF,GAAQE,MAAM,IAAKD,GAEzCxC,EAAW0C,SAAS,MAAOC,cAAc,IACzC3C,EAAW4C,GAAG,QAAQ,kBAAMC,EAAUxB,EAAWpB,EAAOC,WAGpD+B,EAAc,SAACZ,GACnBa,IAEA,IAHiC,EAILvC,IAC1B0B,EAAUC,KAAI,SAACzB,GAAD,OAAOA,EAAEkC,kBALQ,mBAI1BkB,EAJ0B,KAIhBC,EAJgB,KAQ3BC,EAAQ,IAAIC,MAChB/E,KAAKgF,MAAMH,EAAQI,UAAYL,EAASK,WAA9B,SAGZjC,EAAUtD,SAAQ,SAAC8B,GACjB,IAAM0D,EAAQlF,KAAKmF,OAChB3D,EAAEkC,cAAcuB,UAAYL,EAASK,WAAtC,QAEFzD,EAAE4D,KAAOF,EACLJ,EAAMI,IACR1D,EAAE6D,OAASP,EAAMI,GAAS,EAC1BJ,EAAMI,MAEN1D,EAAE6D,OAAS,EAEbP,EAAMI,GAAS1D,EAAE6D,UAGnBrC,EAAUtD,SAAQ,SAAC8B,GACjBA,EAAE8D,UAAa9D,EAAE6D,OAASP,EAAMtD,EAAE4D,MAAS,EAAIpF,KAAKC,MAGtD,IAAMsF,EAAcjE,IAClB,CAAC,EAAGwD,EAAMU,OAAS,GACnB,CAAC,IAAKhD,EAAS,KAAe,IAGrB+C,EAAY,GAEvB5D,EAAaL,IAAmB0B,GAEhC,IAAMkB,EAAS5C,MAEZvB,GACC,gBAAGqF,EAAH,EAAGA,KAAME,EAAT,EAASA,UAAT,OACEC,EAAYH,GAAQpF,KAAKyD,IAAI6B,GAAa9C,EAAS,KAEnD2B,EAAS7C,MAEZxB,GACC,gBAAGsF,EAAH,EAAGA,KAAME,EAAT,EAASA,UAAT,OACEC,EAAYH,GAAQpF,KAAKwD,IAAI8B,GAAa7C,EAAQ,KAGxDd,EAAWyC,MAAM,IAAKD,GAAQC,MAAM,IAAKF,GAEzC5C,IAAUJ,EAASuE,SAASC,UAAU,KAAKC,SAC3CrE,IAAUH,EAASsE,SAASC,UAAU,KAAKC,SAE3ChE,EAAW0C,SAAS,IAAKC,cAAc,IACvC3C,EAAW4C,GAAG,QAAQ,WACpB,IAAMqB,EAAU/C,EAAI4C,QAAQI,WAAW,MAEvCD,EAAQE,UAAU,EAAG,EAAGrD,EAAOD,GAE/BsC,EACG7B,KAAI,SAAC8C,EAAGrB,GAAJ,OAAUI,EAAMU,OAASd,KAC7BhF,SAAQ,SAACgF,GACRkB,EAAQhG,YACRgG,EAAQI,QACNvD,EAAQ,EACRD,EAAS,EACT+C,EAAYb,EAAI,IAChBa,EAAYb,EAAI,IAChB,EACA,EACA,EAAI1E,KAAKC,IAGN2F,EAAQ1F,UADbwE,EAAI,IAAM,EACe,UACA,QACzBkB,EAAQzF,UAGZb,EAAOC,SAASqG,EAAS5C,OAIvBiD,EAAY,SAACjD,GACjBa,IAEAlC,EAAaL,IAAmB0B,GAEhC,IAAM5B,EAASE,IACbA,IAAU0B,EAAUC,KAAI,SAACzB,GAAD,OAAOA,EAAEkC,kBACjC,CArMU,GAqMAjB,EArMA,KAuMNyD,EAAS5E,IAAe,CAAC,EAAG,KAAO,CAvM7B,GAuMuCkB,EAvMvC,KAyMN0B,EAAS5C,MAEZvB,GAAE,SAACJ,GAAD,OAAWA,EAAKwG,MAAQD,EAAOvG,EAAKwG,QA3M7B,MA4MNhC,EAAS7C,MAAYxB,GAAE,SAACH,GAAD,OAAUyB,EAAOzB,EAAK+D,kBAEnD/B,EAAWyC,MAAM,IAAKD,GAAQC,MAAM,IAAKF,GAEzClD,EAAOC,SACLK,IAAUJ,EAASuE,SACnBnE,IAAUH,EAASsE,SACnBrE,GAGFO,EAAW0C,SAAS,KAAMC,cAAc,IACxC3C,EAAW4C,GAAG,QAAQ,WACpB,IAAMqB,EAAU/C,EAAI4C,QAAQI,WAAW,MAEvCD,EAAQE,UAAU,EAAG,EAAGrD,EAAOD,GAC/BlD,EAAOC,SAASqG,EAAS5C,GACzB1D,EAAOc,oBAAoBwF,EAAS5C,OAIlCoD,EAAmB,SAACpD,GACxBa,IACAb,EAAUtD,SAAQ,SAACC,GACjBA,EAAK0G,GAA6B,IAAvBrG,KAAKmD,SAAW,IAC3BxD,EAAK2G,GAA6B,IAAvBtG,KAAKmD,SAAW,QAG7BxB,EAAaL,IAAmB0B,IACrBoB,MAAM,SAAUmC,cAAgBC,OAAO,IAClD7E,EAAWyC,MACT,YACAqC,cAAiBC,SAAS,CACxB,CACEC,KAAM,CAAE7G,EAAG,EAAGC,EAAG,GACjB6G,GAAI,CAAE9G,EAAG,EAAGC,EAAGyC,IAEjB,CACEmE,KAAM,CAAE7G,EAAG,EAAGC,EAAG,GACjB6G,GAAI,CAAE9G,EAAG2C,EAAO1C,EAAG,IAErB,CACE4G,KAAM,CAAE7G,EAAG,EAAGC,EAAGyC,GACjBoE,GAAI,CAAE9G,EAAG2C,EAAO1C,EAAGyC,IAErB,CACEmE,KAAM,CAAE7G,EAAG2C,EAAO1C,EAAG,GACrB6G,GAAI,CAAE9G,EAAG2C,EAAO1C,EAAGyC,OAIzBb,EAAW2C,cAAc,GAAGD,SAAS,GACrC1C,EAAW4C,GAAG,QAAQ,kBAAMC,EAAUxB,EAAWpB,EAAOE,cAGpD+E,EAAoB,SAAC7D,GACzBa,IACAb,EAAUtD,SAAQ,SAACC,GACjBA,EAAK0G,GAA6B,GAAvBrG,KAAKmD,SAAW,IAC3BxD,EAAK2G,GAA6B,GAAvBtG,KAAKmD,SAAW,OAG7B7B,IAAUJ,EAASuE,SAASC,UAAU,KAAKC,SAC3CrE,IAAUH,EAASsE,SAASC,UAAU,KAAKC,SAE3ChE,EAAaL,IAAmB0B,GAChC,IAAMkB,EAAS5C,MAAYvB,GAAE,qBAAG+G,OAC1B3C,EAAS7C,MAAYxB,GAAE,qBAAGiH,OAEhCC,QAAQC,IAAIjE,EAAU,IAEtBrB,EACGyC,MAAM,IAAKD,GACXC,MAAM,IAAKF,GACXG,SAAS,KACTC,cAAc,IACjB3C,EAAW4C,GAAG,QAAQ,WACpB,IAAMqB,EAAU/C,EAAI4C,QAAQI,WAAW,MAEvCD,EAAQE,UAAU,EAAG,EAAGrD,EAAOD,GAC/BlD,EAAOC,SAASqG,EAAS5C,OAIvBwB,EAAY,SAACxB,EAAWkE,GAC5B,IAAMtB,EAAU/C,EAAI4C,QAAQI,WAAW,MAKvC,GAHAD,EAAQE,UAAU,EAAG,EAAGrD,EAAOD,GAC/BlD,EAAOC,SAASqG,EAAS5C,GAErBkE,IAActF,EAAOC,MAAO,CAC9B,IAAMT,EAASE,IACbA,IAAU0B,EAAUC,KAAI,SAACzB,GAAD,OAAOA,EAAEkC,kBACjC,CAxSQ,GAwSEjB,EAxSF,KA2SVzB,EAAOC,SACLK,IAAUJ,EAASuE,SACnBnE,IAAUH,EAASsE,SACnBrE,QAGFE,IAAUJ,EAASuE,SAASC,UAAU,KAAKC,SAC3CrE,IAAUH,EAASsE,SAASC,UAAU,KAAKC,UAI/C,OACE,oCACE,yBAAKwB,MAAO,CAAE1E,MAAO,OAAQD,OAAQ,OAAQ4E,SAAU,aACrD,uBAAGvE,IAAK3B,EAAUmG,UAAS,sBAAiB7E,EAzTpC,GAyTmB,OAC3B,uBAAGK,IAAK1B,EAAUkG,UAAS,oBA1TnB,GA0TmB,YA1TnB,GA0TmB,QAE7B,4BACE5E,MAAOA,EACPD,OAAQA,EACR8E,QAAS,SAACC,GAAD,OA/RM,SAACA,GACpBA,EAAEC,iBAEF,IAAMC,EAAkBrF,OAAOsF,OAAO9F,IACnCO,EAAUwF,QAAQhF,GAAgB,GAAKR,EAAUqD,QAGhD7D,IACE8F,IAAoB7F,EAAOE,SAC7BsE,EAAiBzE,EAAWlC,SACnBgI,IAAoB7F,EAAOC,MACpC4C,EAAW9C,EAAWlC,SACbgI,IAAoB7F,EAAOI,OACpC+B,EAAepC,EAAWlC,SACjBgI,IAAoB7F,EAAOK,OACpC2B,EAAYjC,EAAWlC,SACdgI,IAAoB7F,EAAOG,MACpCkE,EAAUtE,EAAWlC,SACZgI,IAAoB7F,EAAOM,WACpC2E,EAAkBlF,EAAWlC,UAIjCmD,EAAgB6E,GAwQIG,CAAaL,IAC7B1E,IAAKA,EACLsE,MAAO,CAAEC,SAAU,gBCzUZS,EARO,WACpB,OACE,6BACE,kBAAC,EAAD,CAAMtF,KAAMA,EAAMC,OAAQsF,OAAOC,YAAatF,MAAOqF,OAAOE,eCGnDC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.11f63faa.chunk.js","sourcesContent":["const D3Dots = {\n  drawDots(ctx, nodes) {\n    nodes.forEach((node) => {\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, 3, 0, 2 * Math.PI, false);\n      ctx.fillStyle = node.fill;\n      ctx.fill();\n    });\n  },\n\n  drawHorizontalLinks(ctx, nodes) {\n    nodes.forEach((node) => {\n      if (node.children) {\n        node.children.forEach((child) => {\n          const childNode = nodes[child - 1];\n          ctx.beginPath();\n          if (node.cluster) {\n            if (node.cluster === \"F\") ctx.strokeStyle = \"green\";\n            else if (node.cluster === \"C\") ctx.strokeStyle = \"red\";\n            else ctx.strokeStyle = \"blue\";\n          }\n          ctx.moveTo(node.x, node.y);\n          const midX = (childNode.x + node.x) / 2;\n          ctx.bezierCurveTo(\n            midX,\n            node.y,\n            midX,\n            childNode.y,\n            childNode.x,\n            childNode.y\n          );\n          ctx.stroke();\n        });\n      }\n    });\n  },\n\n  drawVerticalLinks(ctx, nodes) {\n    nodes.forEach((node) => {\n      if (node.children) {\n        node.children.forEach((child) => {\n          const childNode = nodes[child - 1];\n          ctx.beginPath();\n          ctx.moveTo(node.x, node.y);\n          const midY = (childNode.y + node.y) / 2;\n          ctx.bezierCurveTo(\n            node.x,\n            midY,\n            childNode.x,\n            midY,\n            childNode.x,\n            childNode.y\n          );\n          ctx.stroke();\n        });\n      }\n    });\n  },\n};\n\nexport default D3Dots;\n","import * as d3 from \"d3\";\nconst D3Axes = {\n  drawAxes(xAxisRef, yAxisRef, xScale) {\n    const xAxis = d3.axisBottom(xScale).tickFormat((d) => d);\n    xAxis.ticks(d3.timeDay.every(1));\n    xAxis.tickFormat(d3.timeFormat(\"%e\"));\n\n    xAxis(xAxisRef);\n  },\n};\n\nexport default D3Axes;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport D3Dots from \"./D3Dots\";\nimport D3Axes from \"./D3Axes\";\nimport d3ForceBounce from \"d3-force-bounce\";\nimport d3ForceSurface from \"d3-force-surface\";\nimport singapore from \"../data/singapore.json\";\n\nlet simulation = null;\n\nconst STATES = {\n  GRAPH: \"GRAPH\",\n  BROWNIAN: \"BROWNIAN\",\n  LINKS: \"LINKS\",\n  CIRCLE: \"CIRCLE\",\n  RADIAL: \"RADIAL\",\n  SINGAPORE: \"SINGAPORE\",\n};\n\n// debug only, will be removed\nconst stateKeys = Object.keys(STATES);\n\nconst PADDING = 50;\n\nconst Dots = ({ data, height, width }) => {\n  const [displayState, setDisplayState] = useState(STATES.SINGAPORE);\n\n  const ref = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n\n  useEffect(() => {\n    const dataNodes = data.map((d) => {\n      const dist = (Math.random() * Math.min(height, width)) / 5;\n      const locAngle = Math.random() * Math.PI * 2;\n      let fillColor = \"red\";\n\n      if (d.status === \"Discharged\") {\n        fillColor = \"green\";\n      } else if (d.status === \"Deceased\") {\n        fillColor = \"black\";\n      }\n\n      d.x = Math.cos(locAngle) * dist + width / 2;\n      d.y = Math.sin(locAngle) * dist + height / 2;\n      d.fill = fillColor;\n      d.dateConfirmed = new Date(d.dateConfirmed);\n\n      return d;\n    });\n\n    radialGraph(dataNodes);\n  }, [data, height, width]);\n\n  const clickHandler = (e) => {\n    e.preventDefault();\n\n    const newDisplayState = Object.values(STATES)[\n      (stateKeys.indexOf(displayState) + 1) % stateKeys.length\n    ];\n\n    if (simulation) {\n      if (newDisplayState === STATES.BROWNIAN) {\n        simulateBrownian(simulation.nodes());\n      } else if (newDisplayState === STATES.GRAPH) {\n        dailyGraph(simulation.nodes());\n      } else if (newDisplayState === STATES.CIRCLE) {\n        simulateGather(simulation.nodes());\n      } else if (newDisplayState === STATES.RADIAL) {\n        radialGraph(simulation.nodes());\n      } else if (newDisplayState === STATES.LINKS) {\n        linkGraph(simulation.nodes());\n      } else if (newDisplayState === STATES.SINGAPORE) {\n        singaporeBrownian(simulation.nodes());\n      }\n    }\n\n    setDisplayState(newDisplayState);\n  };\n\n  const stopSimulation = () => {\n    if (simulation) simulation.stop();\n  };\n\n  const simulateGather = (dataNodes) => {\n    stopSimulation();\n\n    simulation = d3.forceSimulation(dataNodes);\n    const replusion = d3.forceManyBody().strength(-2);\n\n    const yForce = d3\n      .forceY()\n      .y(height / 2)\n      .strength(0.1);\n    const xForce = d3\n      .forceX()\n      .x(width / 2)\n      .strength(0.1);\n\n    simulation.force(\"y\", yForce).force(\"x\", xForce);\n    simulation.force(\"replusion\", replusion);\n\n    simulation.alphaMin(0.1).velocityDecay(0.4);\n    simulation.on(\"tick\", () => forceTick(dataNodes, STATES.CIRCLE));\n  };\n\n  const dailyGraph = (dataNodes) => {\n    stopSimulation();\n\n    const xScale = d3.scaleTime(\n      d3.extent(dataNodes.map((d) => d.dateConfirmed)),\n      [PADDING, width - PADDING]\n    );\n\n    simulation = d3.forceSimulation(dataNodes);\n    const yForce = d3\n      .forceY()\n      .y((node, i) => height - PADDING - 8 * node.dayNo);\n    const xForce = d3.forceX().x((node, i) => xScale(node.dateConfirmed));\n\n    simulation.force(\"y\", yForce).force(\"x\", xForce);\n\n    simulation.alphaMin(0.005).velocityDecay(0.4);\n    simulation.on(\"tick\", () => forceTick(dataNodes, STATES.GRAPH));\n  };\n\n  const radialGraph = (dataNodes) => {\n    stopSimulation();\n\n    const DAY = 1000 * 24 * 60 * 60;\n    const [firstDay, lastDay] = d3.extent(\n      dataNodes.map((d) => d.dateConfirmed)\n    );\n\n    const weeks = new Array(\n      Math.ceil((lastDay.getTime() - firstDay.getTime()) / (7 * DAY))\n    );\n\n    dataNodes.forEach((d) => {\n      const index = Math.floor(\n        (d.dateConfirmed.getTime() - firstDay.getTime()) / (7 * DAY)\n      );\n      d.week = index;\n      if (weeks[index]) {\n        d.weekNo = weeks[index] + 1;\n        weeks[index]++;\n      } else {\n        d.weekNo = 1;\n      }\n      weeks[index] = d.weekNo;\n    });\n\n    dataNodes.forEach((d) => {\n      d.weekAngle = (d.weekNo / weeks[d.week]) * 2 * Math.PI;\n    });\n\n    const radialScale = d3.scaleTime(\n      [0, weeks.length - 1],\n      [15, (height - 2 * PADDING) / 2]\n    );\n\n    const dr = radialScale(1);\n\n    simulation = d3.forceSimulation(dataNodes);\n\n    const yForce = d3\n      .forceY()\n      .y(\n        ({ week, weekAngle }) =>\n          radialScale(week) * Math.sin(weekAngle) + height / 2\n      );\n    const xForce = d3\n      .forceX()\n      .x(\n        ({ week, weekAngle }) =>\n          radialScale(week) * Math.cos(weekAngle) + width / 2\n      );\n\n    simulation.force(\"x\", xForce).force(\"y\", yForce);\n\n    d3.select(xAxisRef.current).selectAll(\"*\").remove();\n    d3.select(yAxisRef.current).selectAll(\"*\").remove();\n\n    simulation.alphaMin(0.1).velocityDecay(0.4);\n    simulation.on(\"tick\", () => {\n      const context = ref.current.getContext(\"2d\");\n\n      context.clearRect(0, 0, width, height);\n\n      weeks\n        .map((_, i) => weeks.length - i)\n        .forEach((i) => {\n          context.beginPath();\n          context.ellipse(\n            width / 2,\n            height / 2,\n            radialScale(i - 0.5),\n            radialScale(i - 0.5),\n            0,\n            0,\n            2 * Math.PI\n          );\n          i % 2 === 0\n            ? (context.fillStyle = \"#eeeeee\")\n            : (context.fillStyle = \"white\");\n          context.fill();\n        });\n\n      D3Dots.drawDots(context, dataNodes);\n    });\n  };\n\n  const linkGraph = (dataNodes) => {\n    stopSimulation();\n\n    simulation = d3.forceSimulation(dataNodes);\n\n    const xScale = d3.scaleTime(\n      d3.extent(dataNodes.map((d) => d.dateConfirmed)),\n      [PADDING, width - PADDING]\n    );\n    const yScale = d3.scaleLinear([0, 1000], [PADDING, height - PADDING]);\n\n    const yForce = d3\n      .forceY()\n      .y((node) => (node.treeY ? yScale(node.treeY) : -PADDING));\n    const xForce = d3.forceX().x((node) => xScale(node.dateConfirmed));\n\n    simulation.force(\"x\", xForce).force(\"y\", yForce);\n\n    D3Axes.drawAxes(\n      d3.select(xAxisRef.current),\n      d3.select(yAxisRef.current),\n      xScale\n    );\n\n    simulation.alphaMin(0.01).velocityDecay(0.4);\n    simulation.on(\"tick\", () => {\n      const context = ref.current.getContext(\"2d\");\n\n      context.clearRect(0, 0, width, height);\n      D3Dots.drawDots(context, dataNodes);\n      D3Dots.drawHorizontalLinks(context, dataNodes);\n    });\n  };\n\n  const simulateBrownian = (dataNodes) => {\n    stopSimulation();\n    dataNodes.forEach((node) => {\n      node.vx = (Math.random() - 0.5) * 15;\n      node.vy = (Math.random() - 0.5) * 15;\n    });\n\n    simulation = d3.forceSimulation(dataNodes);\n    simulation.force(\"bounce\", d3ForceBounce().radius(3));\n    simulation.force(\n      \"container\",\n      d3ForceSurface().surfaces([\n        {\n          from: { x: 0, y: 0 },\n          to: { x: 0, y: height },\n        },\n        {\n          from: { x: 0, y: 0 },\n          to: { x: width, y: 0 },\n        },\n        {\n          from: { x: 0, y: height },\n          to: { x: width, y: height },\n        },\n        {\n          from: { x: width, y: 0 },\n          to: { x: width, y: height },\n        },\n      ])\n    );\n    simulation.velocityDecay(0).alphaMin(0);\n    simulation.on(\"tick\", () => forceTick(dataNodes, STATES.BROWNIAN));\n  };\n\n  const singaporeBrownian = (dataNodes) => {\n    stopSimulation();\n    dataNodes.forEach((node) => {\n      node.vx = (Math.random() - 0.5) * 5;\n      node.vy = (Math.random() - 0.5) * 5;\n    });\n\n    d3.select(xAxisRef.current).selectAll(\"*\").remove();\n    d3.select(yAxisRef.current).selectAll(\"*\").remove();\n\n    simulation = d3.forceSimulation(dataNodes);\n    const yForce = d3.forceY().y(({ sgY }) => sgY);\n    const xForce = d3.forceX().x(({ sgX }) => sgX);\n\n    console.log(dataNodes[7]);\n\n    simulation\n      .force(\"x\", xForce)\n      .force(\"y\", yForce)\n      .alphaMin(0.01)\n      .velocityDecay(0.4);\n    simulation.on(\"tick\", () => {\n      const context = ref.current.getContext(\"2d\");\n\n      context.clearRect(0, 0, width, height);\n      D3Dots.drawDots(context, dataNodes);\n    });\n  };\n\n  const forceTick = (dataNodes, currState) => {\n    const context = ref.current.getContext(\"2d\");\n\n    context.clearRect(0, 0, width, height);\n    D3Dots.drawDots(context, dataNodes);\n\n    if (currState === STATES.GRAPH) {\n      const xScale = d3.scaleUtc(\n        d3.extent(dataNodes.map((d) => d.dateConfirmed)),\n        [PADDING, width - PADDING]\n      );\n\n      D3Axes.drawAxes(\n        d3.select(xAxisRef.current),\n        d3.select(yAxisRef.current),\n        xScale\n      );\n    } else {\n      d3.select(xAxisRef.current).selectAll(\"*\").remove();\n      d3.select(yAxisRef.current).selectAll(\"*\").remove();\n    }\n  };\n\n  return (\n    <>\n      <svg style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}>\n        <g ref={xAxisRef} transform={`translate(0,${height - PADDING})`} />\n        <g ref={yAxisRef} transform={`translate(${PADDING},${PADDING})`} />\n      </svg>\n      <canvas\n        width={width}\n        height={height}\n        onClick={(e) => clickHandler(e)}\n        ref={ref}\n        style={{ position: \"absolute\" }}\n      />\n    </>\n  );\n};\n\nexport default Dots;\n","import React, { useRef, useLayoutEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../data/processedData.json\";\nimport Dots from \"./Dots\";\nimport Chart from \"./Chart\";\n\nconst Visualization = () => {\n  return (\n    <div>\n      <Dots data={data} height={window.innerHeight} width={window.innerWidth} />\n    </div>\n  );\n};\n\nexport default Visualization;\n","import React from \"react\";\nimport \"./App.css\";\nimport Visualization from \"./visualizations/Visualization\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualization />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}